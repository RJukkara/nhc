# LBNL NHC - Hardware Checks
### -*- Mode: Shell-script; fill-column: 120; comment-fill-column: 120; comment-auto-fill-only-comments: t; \
### -*- tab-width: 4; eval: (local-set-key "\C-i" 'indent-according-to-mode); eval: (auto-fill-mode 1); -*-
#
# Michael Jennings <mej@lbl.gov>
# 15 December 2010
#

HW_SOCKETS=0
HW_CORES=0
HW_THREADS=0
HW_RAM_TOTAL=0
HW_RAM_FREE=0
HW_SWAP_TOTAL=0
HW_SWAP_FREE=0
HW_IB_STATE=( )
HW_IB_PHYS_STATE=()
HW_IB_RATE=( )
HW_IB_DEV=()
HW_MODULES=( )
HW_ETH_DEV=( )
MCELOG="${MCELOG:-mcelog}"
MCELOG_ARGS="${MCELOG_ARGS:---client}"
MCELOG_MAX_CORRECTED_RATE="${MCELOG_MAX_CORRECTED_RATE:-9}"
MCELOG_MAX_UNCORRECTED_RATE="${MCELOG_MAX_UNCORRECTED_RATE:-0}"
### FIXME:  Convert all these, and much of the above, to hashmaps
CPUINFO_FILE_DEFAULT="/proc/cpuinfo"
CPUINFO_FILE=""
MEMINFO_FILE_DEFAULT="/proc/meminfo"
MEMINFO_FILE=""
KMOD_FILE_DEFAULT="/proc/modules"
KMOD_FILE=""
NETDEV_FILE_DEFAULT="/proc/net/dev"
NETDEV_FILE=""

# Read CPU information from the specified source
function nhc_hw_cpu_gather_data() {
    local CORES CPUDATA ERR MHZ PROCESSOR SIBLINGS
    local -a FIELD PHYS_IDS
    local -i RC=0

    # Gather CPU info
    PROCESSOR=-1
    if [[ -n "$1" ]]; then
        CPUINFO_FILE="$1"
    fi
    # Set one or both of the below variables to `/proc/cpuinfo` if empty.
    if [[ ! -e "${CPUINFO_FILE:=${CPUINFO_FILE_DEFAULT:=/proc/cpuinfo}}" ]]; then
        # If the file doesn't exist, check and see if we should create and fill it.
        if [[ "${CPUINFO_FILE}" != "${CPUINFO_FILE_DEFAULT}" && -d "${CPUINFO_FILE%/*}" ]]; then
            # If it doesn't exist and isn't set to the default location, but its `dirname` *does* exist, it's meant to
            # be a cache file but still needs to be created and populated.
            ### FIXME: Should NHC be auto-populating this file?
            ERR=$(cat "${CPUINFO_FILE_DEFAULT}" 2>&1 > "${CPUINFO_FILE}" && chmod 0644 "${CPUINFO_FILE}" 2>&1)
            RC=$?
        fi
    fi

    if [[ -e "${CPUINFO_FILE}" && -r "${CPUINFO_FILE}" ]]; then
        CPUDATA=$(< "$CPUINFO_FILE")
        RC=$?
    else
        RC=1
    fi
    if [[ $RC -ne 0 || -n "${ERR}" ]]; then
        ### FIXME:  Should this cause a die() or just return bogus values like before (see below)?
        die 1 "Unable to read CPU data; specified file \"$CPUINFO_FILE\" is missing/unreadable/invalid."
        return 1
    fi

    while read -a FIELD ; do
        if [[ "${FIELD[0]} ${FIELD[1]}" = "processor :" ]]; then
            ((PROCESSOR++))
        elif [[ "${FIELD[0]} ${FIELD[1]} ${FIELD[2]}" = "physical id :" ]]; then
            PHYS_ID=${FIELD[3]}
            if [[ -z "${PHYS_IDS[$PHYS_ID]}" ]]; then
                PHYS_IDS[$PHYS_ID]=1
                ((HW_SOCKETS++))
            fi
        elif [[ "${FIELD[0]} ${FIELD[1]}" = "siblings :" ]]; then
            SIBLINGS=${FIELD[2]}
        elif [[ "${FIELD[0]} ${FIELD[1]} ${FIELD[2]}" = "cpu cores :" ]]; then
            CORES=${FIELD[3]}
        elif [[ "${FIELD[0]} ${FIELD[1]} ${FIELD[2]}" = "cpu MHz :" ]]; then
            MHZ="${FIELD[3]}"
            MHZ="${MHZ/%.*}"
        fi
    done <<< "${CPUDATA}"

    if [[ $PROCESSOR -ge 0 && $HW_SOCKETS -eq 0 ]]; then
        HW_SOCKETS=$((PROCESSOR+1))
        HW_CORES=$HW_SOCKETS
        HW_THREADS=$HW_SOCKETS
    elif [[ -n "$HW_SOCKETS" && -n "$CORES" ]]; then
        HW_CORES=$((HW_SOCKETS*CORES))
        if [[ -n "$SIBLINGS" ]]; then
            HW_THREADS=$((HW_SOCKETS*SIBLINGS))
        fi
    else
        # Fill with bogus (albeit sane) values.
        HW_SOCKETS=1
        HW_CORES=1
        HW_THREADS=1
        MHZ=0
    fi
    dbg "Got $HW_SOCKETS $MHZ MHz processors ($HW_CORES cores, $HW_THREADS threads)"
}

# Read memory hardware details from specified location (e.g., `/proc/meminfo`)
function nhc_hw_mem_gather_data() {
    local ERR IFS LINE
    local -a FIELD LINES MEMDATA
    local -i RC=0

    if [[ -n "$1" ]]; then
        MEMINFO_FILE="$1"
    fi
    # Set one or both of the below variables to `/proc/meminfo` if empty.
    if [[ ! -e "${MEMINFO_FILE:=${MEMINFO_FILE_DEFAULT:=/proc/meminfo}}" ]]; then
        # If the file doesn't exist, check and see if we should create and fill it.
        if [[ "${MEMINFO_FILE}" != "${MEMINFO_FILE_DEFAULT}" && -d "${MEMINFO_FILE%/*}" ]]; then
            # If it doesn't exist and isn't set to the default location, but its `dirname` *does* exist, it's meant to
            # be a cache file but still needs to be created and populated.
            ### FIXME: Should NHC be auto-populating this file?
            ERR=$(cat "${MEMINFO_FILE_DEFAULT}" 2>&1 > "${MEMINFO_FILE}" && chmod 0644 "${MEMINFO_FILE}" 2>&1)
            RC=$?
        fi
    fi

    if [[ -e "${MEMINFO_FILE}" && -r "${MEMINFO_FILE}" ]]; then
        MEMDATA=$(< "$MEMINFO_FILE")
        RC=$?
    else
        RC=1
    fi
    if [[ $RC -ne 0 || -n "${ERR}" ]]; then
        # FIXME:  Should this cause a die() or just return bogus values like before?
        die 1 "Unable to read memory data; specified file \"$MEMINFO_FILE\" is missing/unreadable/invalid."
        return 1
        # Populate with bogus info
        HW_RAM_TOTAL=1024
        HW_RAM_FREE=1
        HW_SWAP_TOTAL=0
        HW_SWAP_FREE=0
    fi

    while read -a FIELD ; do
        if [[ "${FIELD[0]}" = "MemTotal:" ]]; then
            HW_RAM_TOTAL=${FIELD[1]}
        elif [[ "${FIELD[0]}" = "MemFree:" ]]; then
            ((HW_RAM_FREE += ${FIELD[1]}))
        elif [[ "${FIELD[0]}" = "Buffers:" ]]; then
            ((HW_RAM_FREE += ${FIELD[1]}))
        elif [[ "${FIELD[0]}" = "Cached:" ]]; then
            ((HW_RAM_FREE += ${FIELD[1]}))
        elif [[ "${FIELD[0]}" = "SwapTotal:" ]]; then
            HW_SWAP_TOTAL=${FIELD[1]}
        elif [[ "${FIELD[0]}" = "SwapFree:" ]]; then
            HW_SWAP_FREE=${FIELD[1]}
        fi
    done <<< "$MEMDATA"

    dbg "Found $HW_RAM_TOTAL kB RAM ($HW_RAM_FREE kB free)"
    dbg "Found $HW_SWAP_TOTAL kB swap ($HW_SWAP_FREE kB free)"
}

# Load HSN (currently just IB) hardware information
function nhc_hw_hsn_gather_data() {
    local IFS INDEX LINE PORT
    local -a FIELD IB_PORTS

    # If the top-level IB info directory isn't there, punt early.
    if [[ ! -d /sys/class/infiniband ]]; then
        return 0
    fi

    # Turn globbing back on so we can internally generate the list of
    # IB ports.
    set +f
    IFS=''
    IB_PORTS=( /sys/class/infiniband/*/ports/* )
    IFS=$' \t\n'
    set -f

    # Gather data from each IB port found.
    for PORT in "${IB_PORTS[@]}" ; do
        test -e "$PORT" || break
        INDEX=${#HW_IB_STATE[*]}
        IFS=' :'
        read LINE < $PORT/state
        FIELD=( $LINE )
        HW_IB_STATE[$INDEX]=${FIELD[1]}
        read LINE < $PORT/phys_state
        FIELD=( $LINE )
        HW_IB_PHYS_STATE[$INDEX]=${FIELD[1]}
        read LINE < $PORT/rate
        FIELD=( $LINE )
        HW_IB_RATE[$INDEX]=${FIELD[0]}
        IFS=' /'
        FIELD=( $PORT )
        HW_IB_DEV[$INDEX]="${FIELD[4]}:${FIELD[6]}"
        IFS=$' \t\n'
        dbg "Found ${HW_IB_STATE[$INDEX]} (${HW_IB_PHYS_STATE[$INDEX]}) IB Port ${HW_IB_DEV[$INDEX]} (${HW_IB_RATE[$INDEX]} Gb/sec)"
    done
    export HW_IB_STATE HW_IB_PHYS_STATE HW_IB_RATE

    # Check if user-level mad driver is loaded so that IB diag tools will be usable.
    if [[ -f /sys/class/infiniband_mad/abi_version ]]; then
        read HW_IB_UMAD_ABI_VER < /sys/class/infiniband_mad/abi_version
    else
        HW_IB_UMAD_ABI_VER=0
    fi
    export HW_IB_UMAD_ABI_VER
}

# Load kernel module list from /proc/modules
function nhc_hw_kmod_gather_data() {
    local MODDATA=""
    local -a FIELD
    local -i RC

    if [[ -n "$1" ]]; then
        KMOD_FILE="$1"
    fi
    if [[ -e "${KMOD_FILE}" && -r "${KMOD_FILE}" ]]; then
        MODDATA=$(< "$KMOD_FILE")
        RC=$?
    else
        RC=1
    fi
    if [[ $RC -ne 0 ]]; then
        # FIXME:  Should this cause a die()?
        die 1 "Unable to read kernel module data; specified file \"$KMOD_FILE\" is missing/unreadable/invalid."
        return 1
    fi

    while read -a FIELD ; do
        HW_MODULES+=( "${FIELD[0]}" )
    done <<< "$MODDATA"

    export HW_MODULES
    dbg "Found kernel modules:  ${HW_MODULES[*]}"
}

# Load Ethernet hardware information
function nhc_hw_eth_gather_data() {
    local DEV DEVDATA ERR
    local -a FIELD

    if [[ -n "$1" ]]; then
        NETDEV_FILE="$1"
    fi
    # Set one or both of the below variables to `/proc/net/dev` if empty.
    if [[ ! -e "${NETDEV_FILE:=${NETDEV_FILE_DEFAULT:=/proc/net/dev}}" ]]; then
        # If the file doesn't exist, check and see if we should create and fill it.
        if [[ "${NETDEV_FILE}" != "${NETDEV_FILE_DEFAULT}" && -d "${NETDEV_FILE%/*}" ]]; then
            # If it doesn't exist and isn't set to the default location, but its `dirname` *does* exist, it's meant to
            # be a cache file but still needs to be created and populated.
            ### FIXME: Should NHC be auto-populating this file?
            ERR=$(cat "${NETDEV_FILE_DEFAULT}" 2>&1 > "${NETDEV_FILE}" && chmod 0644 "${NETDEV_FILE}" 2>&1)
            RC=$?
        fi
    fi

    if [[ -e "${NETDEV_FILE}" && -r "${NETDEV_FILE}" ]]; then
        DEVDATA=$(< "$NETDEV_FILE")
        RC=$?
    else
        RC=1
    fi
    if [[ $RC -ne 0 || -n "${ERR}" ]]; then
        # FIXME:  Should this cause a die()?
        die 1 "Unable to read network interface data; specified file \"$NETDEV_FILE\" is missing/unreadable/invalid."
        return 1
    fi

    # Gather network interface names
    while read -a FIELD ; do
        if [[ ${FIELD[0]} == *:* ]]; then
            DEV=${FIELD[0]%%:*}
            HW_ETH_DEV+=( "${DEV}" )
        fi
    done <<< "${DEVDATA}"
    export HW_ETH_DEV
    dbg "Found network devices:  ${HW_ETH_DEV[*]}"
}

# Call all of the above functions to load all hardware info
function nhc_hw_gather_data() {
    # Call each `_gather_data()` sub-function in order.
    # FIXME:  How to pass data source as $1 to each function?
    nhc_hw_cpu_gather_data "$@"
    nhc_hw_mem_gather_data "$@"
    nhc_hw_hsn_gather_data "$@"
    nhc_hw_kmod_gather_data "$@"
    nhc_hw_eth_gather_data "$@"
}

# Check that the socket ($1), core ($2), and thread ($3) counts all match.
function check_hw_cpuinfo() {
    local SOCKETS=$1
    local CORES=$2
    local THREADS=$3

    if [[ $HW_SOCKETS -eq 0 ]]; then
        nhc_hw_cpu_gather_data
    fi

    if [[ -n "$SOCKETS" && $SOCKETS -ne $HW_SOCKETS ]]; then
        die 1 "$FUNCNAME:  Actual CPU socket count ($HW_SOCKETS) does not match expected ($SOCKETS)."
        return 1
    fi
    if [[ -n "$CORES" && $CORES -ne $HW_CORES ]]; then
        die 1 "$FUNCNAME:  Actual CPU core count ($HW_CORES) does not match expected ($CORES)."
        return 1
    fi
    if [[ -n "$THREADS" && $THREADS -ne $HW_THREADS ]]; then
        die 1 "$FUNCNAME:  Actual CPU thread count ($HW_THREADS) does not match expected ($THREADS)."
        return 1
    fi
    return 0
}

# Check RAM size against minimum ($1) and maximum ($2) allowable size in kB.  To
# require an exact amount of RAM, pass the same value for both parameters.
# The optional fudge factor ($3) allows a certain amount of variance to be tolerated.
function check_hw_physmem() {
    local RAM_MIN="$1" RAM_MAX="$2" FUDGE="$3"

    if [[ $HW_RAM_TOTAL -eq 0 ]]; then
        nhc_hw_mem_gather_data
    fi

    nhc_common_parse_size "$RAM_MIN" RAM_MIN
    nhc_common_parse_size "$RAM_MAX" RAM_MAX
    if [[ -n "$FUDGE" ]]; then
        if [[ "${FUDGE%%%}" != "$FUDGE" ]]; then
            FUDGE="${FUDGE%%%}"
            FUDGE=$((FUDGE*HW_RAM_TOTAL/100))
        else
            nhc_common_parse_size "$FUDGE" FUDGE
        fi
    else
        FUDGE=0
    fi

    if [[ $((HW_RAM_TOTAL+FUDGE)) -lt $RAM_MIN ]]; then
        die 1 "$FUNCNAME:  Actual RAM size ($HW_RAM_TOTAL kB) less than minimum allowed ($RAM_MIN kB)."
        return 1
    fi
    if [[ $((HW_RAM_TOTAL-FUDGE)) -gt $RAM_MAX ]]; then
        die 1 "$FUNCNAME:  Actual RAM size ($HW_RAM_TOTAL kB) greater than maximum allowed ($RAM_MAX kB)."
        return 1
    fi
    return 0
}

# Check swap size against minimum ($1) and maximum ($2) allowable size in kB.  To
# require an exact amount of swap, pass the same value for both parameters.
function check_hw_swap() {
    local SWAP_MIN="$1" SWAP_MAX="$2" FUDGE="$3"

    if [[ $HW_RAM_TOTAL -eq 0 ]]; then
        nhc_hw_mem_gather_data
    fi

    nhc_common_parse_size "$SWAP_MIN" SWAP_MIN
    nhc_common_parse_size "$SWAP_MAX" SWAP_MAX
    if [[ -n "$FUDGE" ]]; then
        if [[ "${FUDGE%%%}" != "$FUDGE" ]]; then
            FUDGE="${FUDGE%%%}"
            FUDGE=$((FUDGE*HW_SWAP_TOTAL/100))
        else
            nhc_common_parse_size "$FUDGE" FUDGE
        fi
    else
        FUDGE=0
    fi

    if [[ $((HW_SWAP_TOTAL+FUDGE)) -lt $SWAP_MIN ]]; then
        die 1 "$FUNCNAME:  Actual SWAP size ($HW_SWAP_TOTAL kB) less than minimum allowed ($SWAP_MIN kB)."
        return 1
    fi
    if [[ $((HW_SWAP_TOTAL-FUDGE)) -gt $SWAP_MAX ]]; then
        die 1 "$FUNCNAME:  Actual SWAP size ($HW_SWAP_TOTAL kB) greater than maximum allowed ($SWAP_MAX kB)."
        return 1
    fi
}

# Check total memory (RAM + swap) against minimum ($1) and maximum ($2) allowable size
# in kB.  To require an exact amount of memory, pass the same value for both parameters.
# The optional fudge factor ($3) allows a certain amount of variance to be tolerated.
function check_hw_mem() {
    local MEM_MIN="$1" MEM_MAX="$2" FUDGE="$3"
    local MEM_TOTAL

    if [[ $HW_RAM_TOTAL -eq 0 ]]; then
        nhc_hw_mem_gather_data
    fi

    nhc_common_parse_size "$MEM_MIN" MEM_MIN
    nhc_common_parse_size "$MEM_MAX" MEM_MAX
    MEM_TOTAL=$((HW_RAM_TOTAL + HW_SWAP_TOTAL))
    if [[ -n "$FUDGE" ]]; then
        if [[ "${FUDGE%%%}" != "$FUDGE" ]]; then
            FUDGE="${FUDGE%%%}"
            FUDGE=$((FUDGE*MEM_TOTAL/100))
        else
            nhc_common_parse_size "$FUDGE" FUDGE
        fi
    else
        FUDGE=0
    fi

    if [[ $((MEM_TOTAL+FUDGE)) -lt $MEM_MIN ]]; then
        die 1 "$FUNCNAME:  Actual system memory ($MEM_TOTAL kB) less than minimum allowed ($MEM_MIN kB)."
        return 1
    fi
    if [[ $((MEM_TOTAL-FUDGE)) -gt $MEM_MAX ]]; then
        die 1 "$FUNCNAME:  Actual system memory ($MEM_TOTAL kB) greater than maximum allowed ($MEM_MAX kB)."
        return 1
    fi
}

# Check amount of free RAM against minimum ($1).
function check_hw_physmem_free() {
    local RAM_MINFREE=$1

    if [[ $HW_RAM_TOTAL -eq 0 ]]; then
        nhc_hw_mem_gather_data
    fi

    nhc_common_parse_size "$RAM_MINFREE" RAM_MINFREE

    if [[ $HW_RAM_FREE -lt $RAM_MINFREE ]]; then
        die 1 "$FUNCNAME:  Not enough RAM free ($HW_RAM_FREE kB < $RAM_MINFREE kB)."
        return 1
    fi
    return 0
}

# Check amount of free swap against minimum ($1).
function check_hw_swap_free() {
    local SWAP_MINFREE=$1

    if [[ $HW_RAM_TOTAL -eq 0 ]]; then
        nhc_hw_mem_gather_data
    fi

    nhc_common_parse_size "$SWAP_MINFREE" SWAP_MINFREE

    if [[ $HW_SWAP_FREE -lt $SWAP_MINFREE ]]; then
        die 1 "$FUNCNAME:  Not enough swap free ($HW_SWAP_FREE kB < $SWAP_MINFREE kB)."
        return 1
    fi
    return 0
}

# Check amount of free system memory (RAM + swap) against minimum ($1).
function check_hw_mem_free() {
    local MEM_MINFREE=$1
    local MEM_FREE

    if [[ $HW_RAM_TOTAL -eq 0 ]]; then
        nhc_hw_mem_gather_data
    fi

    nhc_common_parse_size "$MEM_MINFREE" MEM_MINFREE

    MEM_FREE=$((HW_RAM_FREE + HW_SWAP_FREE))
    if [[ $MEM_FREE -lt $MEM_MINFREE ]]; then
        die 1 "$FUNCNAME:  Not enough free memory ($MEM_FREE kB < $MEM_MINFREE kB)."
        return 1
    fi
    return 0
}

# Check if IB state, phys_state, and rate ($1) all match.
function check_hw_ib() {
    local STATE="ACTIVE"
    local PHYS_STATE="LinkUp"
    local RATE="$1"
    local DEV="$2"
    local i

    if [[ ${#HW_IB_STATE[*]} -eq 0 ]]; then
        nhc_hw_hsn_gather_data
    fi

    if [[ $HW_IB_UMAD_ABI_VER -eq 0 ]]; then
        die 1 "$FUNCNAME:  Version mismatch between kernel OFED drivers and userspace OFED libraries."
        return 1
    fi

    for ((i=0; i < ${#HW_IB_STATE[*]}; i++)); do
        if [[ "${HW_IB_STATE[$i]}" == "$STATE" && "${HW_IB_PHYS_STATE[$i]}" == "$PHYS_STATE" ]]; then
            if [[ (-z "$DEV" || "${HW_IB_DEV[$i]}" == "$DEV") && (-z "$RATE" || "${HW_IB_RATE[$i]}" == "$RATE") ]]; then
                return 0
            fi
        fi
    done

    if [[ -n "$DEV" ]]; then
        DEV=" $DEV"
    fi
    if [[ -n "$RATE" ]]; then
        RATE=" $RATE Gb/sec"
    fi

    die 1 "$FUNCNAME:  No IB port$DEV is $STATE ($PHYS_STATE$RATE)."
    return 1
}

# Check if Myrinet GM device driver and device ($1) are both available.
function check_hw_gm() {
    local DEV=$1
    local GM="gm"
    local MATCH=0
    local i j

    if [[ ${#HW_MODULES[*]} -eq 0 ]]; then
        nhc_hw_kmod_gather_data
    fi
    if [[ ${#HW_ETH_DEV[*]} -eq 0 ]]; then
        nhc_hw_eth_gather_data
    fi

    for ((i=0; i < ${#HW_ETH_DEV[*]}; i++)); do
        if [[ ${HW_ETH_DEV[$i]} == $DEV ]]; then
            for ((j=0; j < ${#HW_MODULES[*]}; j++)); do
                if [[ ${HW_MODULES[$j]} == $GM ]]; then
                    return 0
                fi
            done
        fi
    done

    die 1 "$FUNCNAME:  GM device $DEV not active, either driver is not loaded, or interface not created."
    return 1
}

# Check if arbitrary Ethernet device ($1) is available.
function check_hw_eth() {
    local DEV=$1
    local i

    if [[ ${#HW_ETH_DEV[*]} -eq 0 ]]; then
        nhc_hw_eth_gather_data
    fi

    for ((i=0; i < ${#HW_ETH_DEV[*]}; i++)); do
        if [[ ${HW_ETH_DEV[$i]} == $DEV ]]; then
            return 0
        fi
    done

    die 1 "$FUNCNAME:  Ethernet device $DEV not detected."
    return 1
}

# Check for MCE errors
function check_hw_mcelog() {
    local HW_MCELOG_ERRS MSG=""
    local -a ERROR_LINES ERROR_LINE
    local i

    HW_MCELOG_ERRS=$($MCELOG $MCELOG_ARGS 2>&1)
    if [[ -z "$HW_MCELOG_ERRS" ]]; then
        return 0
    elif mcheck_glob "$HW_MCELOG_ERRS" "*Connection refused*" ; then
        log "$FUNCNAME:  No mcelog daemon running on $HOSTNAME"
        syslog "$FUNCNAME:  No mcelog daemon running on $HOSTNAME"
        return 0
    elif [[ -n "$MCELOG_MAX_CORRECTED_RATE" && -n "$MCELOG_MAX_UNCORRECTED_RATE" ]]; then
        IFS=$'\n'
        ERROR_LINES=( $HW_MCELOG_ERRS )
        IFS=$' \t\n'

        dbg "$FUNCNAME:  Checking for MCEs on each DIMM (with 24-hour thresholds of $MCELOG_MAX_CORRECTED_RATE corrected or $MCELOG_MAX_UNCORRECTED_RATE uncorrected errors)"

        # Determine if any DIMMs have experienced dangerous error rates within
        # the last 24 hours. Corrected errors are OK in small quantities. The
        # expected mcelog output format for each DIMM will be:
        #
        # corrected memory errors:
        #         325 total
        #         9 in 24h
        # uncorrected memory errors:
        #         0 total
        #         0 in 24h
        #
        for ((i=0; i<${#ERROR_LINES[*]}; i++)); do
            if [[ "${ERROR_LINES[$i]}" == "corrected memory errors:" ]] ; then
                ERROR_LINE=( ${ERROR_LINES[$(($i+2))]} )
                dbg "$FUNCNAME:  This DIMM detected ${ERROR_LINE[0]} corrected errors within the last 24 hours"

                if [[ ${ERROR_LINE[0]} -gt $MCELOG_MAX_CORRECTED_RATE ]]; then
                    MSG="$FUNCNAME:  MCEs detected - ${ERROR_LINE[0]} corrected memory errors detected (limit of $MCELOG_MAX_CORRECTED_RATE/day)."
                    break
                fi
            elif [[ "${ERROR_LINES[$i]}" == "uncorrected memory errors:" ]] ; then
                ERROR_LINE=( ${ERROR_LINES[$(($i+2))]} )
                dbg "$FUNCNAME:  This DIMM detected ${ERROR_LINE[0]} UNcorrected errors within the last 24 hours"

                if [[ ${ERROR_LINE[0]} -gt $MCELOG_MAX_UNCORRECTED_RATE ]]; then
                    MSG="$FUNCNAME:  MCEs detected - ${ERROR_LINE[0]} UNcorrected memory errors detected (limit of $MCELOG_MAX_UNCORRECTED_RATE/day)."
                    break
                fi
            fi
        done
        if [[ -n "$MSG" ]]; then
            log "$MSG"
            die 1 "$MSG"
            return 1
        fi

        # If none of the above thresholds was met, return success.
        return 0
    else
        dbg "$FUNCNAME:  mcelog output was not empty; thresholds have not been set, so we must assume the MCEs are fatal"
        log "$FUNCNAME:  MCEs detected:  $HW_MCELOG_ERRS"
        die 1 "$FUNCNAME:  MCEs detected in log."
        return 1
    fi
}
